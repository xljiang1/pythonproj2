# Logging in Intuit Service Mesh

You can search any transaction with Intuit_tid. Intuit_tid will be present in response [header](../features/Headers.md).

Sample search query
- Search By Intuit Tid and splunk index ; `servicemesh-e2eidx` for preprod and `servicemesh-prdidx` for prod
```
index=servicemesh-${env}  intuit_tid=940ee0d4-a75a-415e-b9c1-c08a1fffa084
```
- Splunk query to group requests by status codes for a service by mesh endpoint and clientAsset for a given service
```
index=servicemesh-${e2e} destinationAsset=Intuit.platform.servicesfabric.serviceregistry | stats count by authority, sourceAsset, status
```
## Splunk URL

The Service Mesh logs at the moment are sent to the cluster's configured splunk index. For example, the mesh logs for PAAS clusters can be found on the following splunk:

- E2E : https://ip.e2e.adhoc.splunk.intuit.com/en-US/app/launcher/home
- PRD : https://ip.adhoc.splunk.intuit.com/en-US/app/launcher/home

Please follow this [wiki](https://wiki.intuit.com/display/ctodevappops/CTODev+Splunk) for more updated splunk information.

`Note: This is changing in August 2021` - All service mesh logs will be sent to IP Splunk and will be co-located with API Gateway logs

## Sample Splunk Log
```shell script
2021-06-25T20:09:33.892Z LogPublisherImpl hostname=developer-service-appd-deployment-c79bcddc4-pd7x4 txId=cc11c171-407e-453d-a0ae-5ebf3e61f40b sourceIP=10.167.82.185:53788 xFor=- originatingIp=-
upstream_host=172.20.169.232:80 user-agent=Java/11.0.6 downstreamRemoteAddress=10.167.82.185:47796 req=/v1/apps/435740858238324195/credentials/oauth2?raw=true&env=e2e method=GET protocol=HTTP/1.1
xHost=- status=200 response_flags=- msg=via_upstream authority=e2e.Intuit.platform.servicesfabric.serviceregistry.mesh reqSize=0 respSize=144 upstreamTime=21 requestDuration=0 responseDuration=23
envoyTime=0 txTime=23 routeName=- upstreamCluster=outbound|80||e2e.Intuit.platform.servicesfabric.serviceregistry.mesh upstreamTransportFailureReason=- downstreamLocalSAN=- downstreamPeerSAN=-
downstreamLocalSubject=- downstreampeerSubject=- event="source" destinationAsset="Intuit.platform.servicesfabric.serviceregistry" sourceAsset="Intuit.platform.developerproject.developerservice" app="developer-service"
```

## Description of some useful fields
|Field Name                 |Description                          |Notes                         |
|----------------           |-------------------------------      |------------------------------|
|event                      | Possible values: `source` (the log entry is from source app's mesh sidecar) OR `destionation` (the log entry is from destination service's mesh sidecar)| |
|hostname                   | Name of the source pod| |
|txId                       | Transaction Id (thats passed in via `intuit-tid` header| |
|sourceAsset                | Asset alias of the client| |
|destinationAsset           | Asset alias of the service| |
|authority                  | Hostname/endpoint being called| |
|status                     | HTTP status code| `0` or `-` value usually means envoy is acting as a TCP proxy|
|envoyTime                  | Time taken mesh sidecar | |
|upstreamTime               | Time taken by service/application | |
|txTime                     | Total time for transaction as recorded by the mesh sidecar | |
|reqSize                    | Request Size | |
|respSize                   | Response Size| |
|req                        | HTTP request path| |
|app                        | Value of `app` label the service (deployment)| |
|respSize                   | Response Size| |
|response_flags             | Envoy error flags| Refer to `RESPONSE_FLAGS` values [here](https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage)|

## Mesh vs non mesh errors
API Gateway transactions have `gw_gen` flag in logs that helps identify if the error was generated by Gateway. Similarly for Service Mesh you can distinguish that to some extent. Here is how:

* If event=`source|destination` and response_flags=`-` ===> `Not a mesh generated error`
* If event=`source` and response_flags=`<not empty>`
    Then
    * If the corresponding event=`destination` log is missing then `its a mesh generated error`
    * If destination log says: event=`destination` and response_flags=`<not empty>` then `its mostly mesh generated error` (provided upstream service pods are healthy)